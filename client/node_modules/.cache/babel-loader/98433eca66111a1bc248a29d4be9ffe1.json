{"ast":null,"code":"import { __rest, __assign } from 'tslib';\n/**\r\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\r\n * element, so even though these handlers might all be triggered by different\r\n * observers, we can keep them in the same map.\r\n */\n\nvar observerCallbacks = new WeakMap();\n/**\r\n * Multiple observers can be created for multiple element/document roots. Each with\r\n * different settings. So here we store dictionaries of observers to each root,\r\n * using serialised settings (threshold/margin) as lookup keys.\r\n */\n\nvar observers = new WeakMap();\n\nvar fireObserverCallback = function (entry) {\n  var _a;\n\n  (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n};\n\nvar fireAllObserverCallbacks = function (entries) {\n  entries.forEach(fireObserverCallback);\n};\n\nfunction initIntersectionObserver(_a) {\n  var root = _a.root,\n      options = __rest(_a, [\"root\"]);\n\n  var lookupRoot = root || document;\n  /**\r\n   * If we don't have an observer lookup map for this root, create one.\r\n   */\n\n  if (!observers.has(lookupRoot)) {\n    observers.set(lookupRoot, {});\n  }\n\n  var rootObservers = observers.get(lookupRoot);\n  var key = JSON.stringify(options);\n  /**\r\n   * If we don't have an observer for this combination of root and settings,\r\n   * create one.\r\n   */\n\n  if (!rootObservers[key]) {\n    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __assign({\n      root: root\n    }, options));\n  }\n\n  return rootObservers[key];\n}\n\nfunction observeIntersection(element, options, callback) {\n  var rootInteresectionObserver = initIntersectionObserver(options);\n  observerCallbacks.set(element, callback);\n  rootInteresectionObserver.observe(element);\n  return function () {\n    observerCallbacks.delete(element);\n    rootInteresectionObserver.unobserve(element);\n  };\n}\n\nexport { observeIntersection };","map":{"version":3,"names":["__rest","__assign","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","_a","get","target","fireAllObserverCallbacks","entries","forEach","initIntersectionObserver","root","options","lookupRoot","document","has","set","rootObservers","key","JSON","stringify","IntersectionObserver","observeIntersection","element","callback","rootInteresectionObserver","observe","delete","unobserve"],"sources":["C:/Users/LENOVO/OneDrive/Desktop/Docs/projects/new_arnav_agrathon/Agrothon/client/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs"],"sourcesContent":["import { __rest, __assign } from 'tslib';\r\n\r\n/**\r\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\r\n * element, so even though these handlers might all be triggered by different\r\n * observers, we can keep them in the same map.\r\n */\r\nvar observerCallbacks = new WeakMap();\r\n/**\r\n * Multiple observers can be created for multiple element/document roots. Each with\r\n * different settings. So here we store dictionaries of observers to each root,\r\n * using serialised settings (threshold/margin) as lookup keys.\r\n */\r\nvar observers = new WeakMap();\r\nvar fireObserverCallback = function (entry) {\r\n    var _a;\r\n    (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\r\n};\r\nvar fireAllObserverCallbacks = function (entries) {\r\n    entries.forEach(fireObserverCallback);\r\n};\r\nfunction initIntersectionObserver(_a) {\r\n    var root = _a.root, options = __rest(_a, [\"root\"]);\r\n    var lookupRoot = root || document;\r\n    /**\r\n     * If we don't have an observer lookup map for this root, create one.\r\n     */\r\n    if (!observers.has(lookupRoot)) {\r\n        observers.set(lookupRoot, {});\r\n    }\r\n    var rootObservers = observers.get(lookupRoot);\r\n    var key = JSON.stringify(options);\r\n    /**\r\n     * If we don't have an observer for this combination of root and settings,\r\n     * create one.\r\n     */\r\n    if (!rootObservers[key]) {\r\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __assign({ root: root }, options));\r\n    }\r\n    return rootObservers[key];\r\n}\r\nfunction observeIntersection(element, options, callback) {\r\n    var rootInteresectionObserver = initIntersectionObserver(options);\r\n    observerCallbacks.set(element, callback);\r\n    rootInteresectionObserver.observe(element);\r\n    return function () {\r\n        observerCallbacks.delete(element);\r\n        rootInteresectionObserver.unobserve(element);\r\n    };\r\n}\r\n\r\nexport { observeIntersection };\r\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,iBAAiB,GAAG,IAAIC,OAAJ,EAAxB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,IAAID,OAAJ,EAAhB;;AACA,IAAIE,oBAAoB,GAAG,UAAUC,KAAV,EAAiB;EACxC,IAAIC,EAAJ;;EACA,CAACA,EAAE,GAAGL,iBAAiB,CAACM,GAAlB,CAAsBF,KAAK,CAACG,MAA5B,CAAN,MAA+C,IAA/C,IAAuDF,EAAE,KAAK,KAAK,CAAnE,GAAuE,KAAK,CAA5E,GAAgFA,EAAE,CAACD,KAAD,CAAlF;AACH,CAHD;;AAIA,IAAII,wBAAwB,GAAG,UAAUC,OAAV,EAAmB;EAC9CA,OAAO,CAACC,OAAR,CAAgBP,oBAAhB;AACH,CAFD;;AAGA,SAASQ,wBAAT,CAAkCN,EAAlC,EAAsC;EAClC,IAAIO,IAAI,GAAGP,EAAE,CAACO,IAAd;EAAA,IAAoBC,OAAO,GAAGf,MAAM,CAACO,EAAD,EAAK,CAAC,MAAD,CAAL,CAApC;;EACA,IAAIS,UAAU,GAAGF,IAAI,IAAIG,QAAzB;EACA;AACJ;AACA;;EACI,IAAI,CAACb,SAAS,CAACc,GAAV,CAAcF,UAAd,CAAL,EAAgC;IAC5BZ,SAAS,CAACe,GAAV,CAAcH,UAAd,EAA0B,EAA1B;EACH;;EACD,IAAII,aAAa,GAAGhB,SAAS,CAACI,GAAV,CAAcQ,UAAd,CAApB;EACA,IAAIK,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAV;EACA;AACJ;AACA;AACA;;EACI,IAAI,CAACK,aAAa,CAACC,GAAD,CAAlB,EAAyB;IACrBD,aAAa,CAACC,GAAD,CAAb,GAAqB,IAAIG,oBAAJ,CAAyBd,wBAAzB,EAAmDT,QAAQ,CAAC;MAAEa,IAAI,EAAEA;IAAR,CAAD,EAAiBC,OAAjB,CAA3D,CAArB;EACH;;EACD,OAAOK,aAAa,CAACC,GAAD,CAApB;AACH;;AACD,SAASI,mBAAT,CAA6BC,OAA7B,EAAsCX,OAAtC,EAA+CY,QAA/C,EAAyD;EACrD,IAAIC,yBAAyB,GAAGf,wBAAwB,CAACE,OAAD,CAAxD;EACAb,iBAAiB,CAACiB,GAAlB,CAAsBO,OAAtB,EAA+BC,QAA/B;EACAC,yBAAyB,CAACC,OAA1B,CAAkCH,OAAlC;EACA,OAAO,YAAY;IACfxB,iBAAiB,CAAC4B,MAAlB,CAAyBJ,OAAzB;IACAE,yBAAyB,CAACG,SAA1B,CAAoCL,OAApC;EACH,CAHD;AAIH;;AAED,SAASD,mBAAT"},"metadata":{},"sourceType":"module"}